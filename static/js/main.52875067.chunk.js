(this["webpackJsonpreact-pathfinder-visualizer"]=this["webpackJsonpreact-pathfinder-visualizer"]||[]).push([[0],[,,,,,,,,,function(e,t,n){e.exports=n(18)},,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(7),a=n.n(i),s=(n(14),n(15),n(8)),u=n(1),l=n(2),c=n(4),d=n(3),f=n(5),h=(n(16),function(e){function t(){return Object(u.a)(this,t),Object(c.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(f.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){var e=this.props,t=e.col,n=e.isFinish,r=e.isStart,i=e.isWall,a=e.onMouseDown,s=e.onMouseEnter,u=e.onMouseUp,l=e.row,c=n?"node-finish":r?"node-start":i?"node-wall":"";return o.a.createElement("div",{id:"node-".concat(l,"-").concat(t),className:"node ".concat(c),onMouseDown:function(){return a(l,t)},onMouseEnter:function(){return s(l,t)},onMouseUp:function(){return u()}})}}]),t}(r.Component));function v(e,t,n){var r=[];t.distance=0;for(var o=function(e){var t=[],n=!0,r=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var s=i.value,u=!0,l=!1,c=void 0;try{for(var d,f=s[Symbol.iterator]();!(u=(d=f.next()).done);u=!0){var h=d.value;t.push(h)}}catch(v){l=!0,c=v}finally{try{u||null==f.return||f.return()}finally{if(l)throw c}}}}catch(v){r=!0,o=v}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return t}(e);o.length;){m(o);var i=o.shift();if(!i.isWall){if(i.distance===1/0)return r;if(i.isVisited=!0,r.push(i),i===n)return r;p(i,e)}}}function m(e){e.sort((function(e,t){return e.distance-t.distance}))}function p(e,t){var n=function(e,t){var n=[],r=e.col,o=e.row;o>0&&n.push(t[o-1][r]);o<t.length-1&&n.push(t[o+1][r]);r>0&&n.push(t[o][r-1]);r<t[0].length-1&&n.push(t[o][r+1]);return n.filter((function(e){return!e.isVisited}))}(e,t),r=!0,o=!1,i=void 0;try{for(var a,s=n[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var u=a.value;u.distance=e.distance+1,u.previousNode=e}}catch(l){o=!0,i=l}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}}n(17);var y=function(e){function t(e){var n;return Object(u.a)(this,t),(n=Object(c.a)(this,Object(d.a)(t).call(this,e))).state={grid:[],mouseIsPressed:!1},n}return Object(f.a)(t,e),Object(l.a)(t,[{key:"componentDidMount",value:function(){var e=w();this.setState({grid:e})}},{key:"handleMouseDown",value:function(e,t){var n=k(this.state.grid,e,t);this.setState({grid:n,mouseIsPressed:!0})}},{key:"handleMouseEnter",value:function(e,t){if(this.state.mouseIsPressed){var n=k(this.state.grid,e,t);this.setState({grid:n})}}},{key:"handleMouseUp",value:function(){this.setState({mouseIsPressed:!1})}},{key:"animateDijkstra",value:function(e,t){for(var n=this,r=function(r){if(r===e.length)return setTimeout((function(){n.animateShortestPath(t)}),10*r),{v:void 0};setTimeout((function(){var t=e[r];document.getElementById("node-".concat(t.row,"-").concat(t.col)).className="node node-visited"}),10*r)},o=0;o<=e.length;o++){var i=r(o);if("object"===typeof i)return i.v}}},{key:"animateShortestPath",value:function(e){for(var t=function(t){setTimeout((function(){var n=e[t];document.getElementById("node-".concat(n.row,"-").concat(n.col)).className="node node-shortest-path"}),50*t)},n=0;n<e.length;n++)t(n)}},{key:"visualizeDijkstra",value:function(){var e=this.state.grid,t=e[10][15],n=e[10][35],r=v(e,t,n),o=function(e){for(var t=[],n=e;null!==n;)t.unshift(n),n=n.previousNode;return t}(n);this.animateDijkstra(r,o)}},{key:"render",value:function(){var e=this,t=this.state,n=t.grid,r=t.mouseIsPressed;return o.a.createElement(o.a.Fragment,null,o.a.createElement("button",{className:"ready",onClick:function(){return e.visualizeDijkstra()}},"Visualize Dijkstra's Algorithm!"),o.a.createElement("p",null,"Click on the grid to generate walls!"),o.a.createElement("p",{style:{color:"#555"}},"This app is currently in BETA. I am working on coding new algorithms."),o.a.createElement("p",{style:{color:"#555"}},"It will look better in Desktop mode, as I work on new algorithms and better CSS."),o.a.createElement("div",{className:"grid"},n.map((function(t,n){return o.a.createElement("div",{key:n},t.map((function(t,n){var i=t.row,a=t.col,s=t.isStart,u=t.isFinish,l=t.isWall;return(o.a.createElement(h,{key:n,col:a,isStart:s,isFinish:u,isWall:l,mouseIsPressed:r,onMouseDown:function(t,n){return e.handleMouseDown(t,n)},onMouseEnter:function(t,n){return e.handleMouseEnter(t,n)},onMouseUp:function(){return e.handleMouseUp()},row:i}))})))}))),o.a.createElement("p",{style:{color:"#555"}},"Dijkstra's Algorithm will find the shortest path between two nodes."))}}]),t}(r.Component),w=function(){for(var e=[],t=0;t<20;t++){for(var n=[],r=0;r<50;r++)n.push(g(r,t));e.push(n)}return e},g=function(e,t){return{col:e,row:t,isStart:10===t&&15===e,isFinish:10===t&&35===e,distance:1/0,isVisited:!1,isWall:!1,previousNode:null}},k=function(e,t,n){var r=e.slice(),o=r[t][n],i=Object(s.a)({},o,{isWall:!o.isWall});return r[t][n]=i,r};var E=function(){return o.a.createElement("div",{className:"App"},o.a.createElement(y,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(o.a.createElement(E,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}],[[9,1,2]]]);
//# sourceMappingURL=main.52875067.chunk.js.map